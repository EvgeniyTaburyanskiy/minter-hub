// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: minter/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgValsetConfirm
// this is the message sent by the validators when they wish to submit their
// signatures over the validator set at a given block height. A validator must
// first call MsgSetEthAddress to set their Ethereum address to be used for
// signing. Then someone (anyone) must make a ValsetRequest the request is
// essentially a messaging mechanism to determine which block all validators
// should submit signatures over. Finally validators sign the validator set,
// powers, and Ethereum addresses of the entire validator set at the height of a
// ValsetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set
// Ethereum addresses and (B) submit ValsetConfirm messages with their
// signatures it is then possible for anyone to view these signatures in the
// chain store and submit them to Ethereum to update the validator set
// -------------
type MsgValsetConfirm struct {
	Nonce         uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Validator     string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	MinterAddress string `protobuf:"bytes,3,opt,name=minter_address,json=minterAddress,proto3" json:"minter_address,omitempty"`
	Signature     string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgValsetConfirm) Reset()         { *m = MsgValsetConfirm{} }
func (m *MsgValsetConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgValsetConfirm) ProtoMessage()    {}
func (*MsgValsetConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{0}
}
func (m *MsgValsetConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetConfirm.Merge(m, src)
}
func (m *MsgValsetConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetConfirm proto.InternalMessageInfo

func (m *MsgValsetConfirm) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgValsetConfirm) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgValsetConfirm) GetMinterAddress() string {
	if m != nil {
		return m.MinterAddress
	}
	return ""
}

func (m *MsgValsetConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// TODO: write response data here
type MsgValsetConfirmResponse struct {
}

func (m *MsgValsetConfirmResponse) Reset()         { *m = MsgValsetConfirmResponse{} }
func (m *MsgValsetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValsetConfirmResponse) ProtoMessage()    {}
func (*MsgValsetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{1}
}
func (m *MsgValsetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetConfirmResponse.Merge(m, src)
}
func (m *MsgValsetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetConfirmResponse proto.InternalMessageInfo

// ValsetRequest
// This message starts off the validator set update process by coordinating a
// block height around which signatures over the validators, powers, and
// ethereum addresses will be made and submitted using a ValsetConfirm. Anyone
// can send this message as it is not authenticated except as a valid tx. In
// theory people could spam it and the validators will have to determine which
// block to actually coordinate around by looking over the valset requests and
// seeing which one some other validator has already submitted a ValsetResponse
// for.
// -------------
type MsgValsetRequest struct {
	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *MsgValsetRequest) Reset()         { *m = MsgValsetRequest{} }
func (m *MsgValsetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgValsetRequest) ProtoMessage()    {}
func (*MsgValsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{2}
}
func (m *MsgValsetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetRequest.Merge(m, src)
}
func (m *MsgValsetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetRequest proto.InternalMessageInfo

func (m *MsgValsetRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

// TODO: write response data here
type MsgValsetRequestResponse struct {
}

func (m *MsgValsetRequestResponse) Reset()         { *m = MsgValsetRequestResponse{} }
func (m *MsgValsetRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValsetRequestResponse) ProtoMessage()    {}
func (*MsgValsetRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{3}
}
func (m *MsgValsetRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetRequestResponse.Merge(m, src)
}
func (m *MsgValsetRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetRequestResponse proto.InternalMessageInfo

// SetMinterAddress
// This is used by the validators to set the Minter address that represents
// them on the Minter side of the bridge. They must sign their Cosmos address
// using the Minter address they have submitted. Like ValsetResponse this
// message can in theory be submitted by anyone, but only the current validator
// sets submissions carry any weight.
// -------------
type MsgSetMinterAddress struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSetMinterAddress) Reset()         { *m = MsgSetMinterAddress{} }
func (m *MsgSetMinterAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetMinterAddress) ProtoMessage()    {}
func (*MsgSetMinterAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{4}
}
func (m *MsgSetMinterAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMinterAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMinterAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMinterAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMinterAddress.Merge(m, src)
}
func (m *MsgSetMinterAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMinterAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMinterAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMinterAddress proto.InternalMessageInfo

func (m *MsgSetMinterAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSetMinterAddress) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgSetMinterAddress) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// TODO: write response data here
type MsgSetMinterAddressResponse struct {
}

func (m *MsgSetMinterAddressResponse) Reset()         { *m = MsgSetMinterAddressResponse{} }
func (m *MsgSetMinterAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMinterAddressResponse) ProtoMessage()    {}
func (*MsgSetMinterAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{5}
}
func (m *MsgSetMinterAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMinterAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMinterAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMinterAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMinterAddressResponse.Merge(m, src)
}
func (m *MsgSetMinterAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMinterAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMinterAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMinterAddressResponse proto.InternalMessageInfo

// MsgSendToEth
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
// FEE:
// the fee paid for the bridge, distinct from the fee paid to the chain to
// actually send this message in the first place. So a successful send has
// two layers of fees for the user
type MsgSendToMinter struct {
	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MinterDest string     `protobuf:"bytes,2,opt,name=minter_dest,json=minterDest,proto3" json:"minter_dest,omitempty"`
	Amount     types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgSendToMinter) Reset()         { *m = MsgSendToMinter{} }
func (m *MsgSendToMinter) String() string { return proto.CompactTextString(m) }
func (*MsgSendToMinter) ProtoMessage()    {}
func (*MsgSendToMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{6}
}
func (m *MsgSendToMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToMinter.Merge(m, src)
}
func (m *MsgSendToMinter) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToMinter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToMinter proto.InternalMessageInfo

func (m *MsgSendToMinter) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToMinter) GetMinterDest() string {
	if m != nil {
		return m.MinterDest
	}
	return ""
}

func (m *MsgSendToMinter) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// TODO: write response data here
type MsgSendToMinterResponse struct {
}

func (m *MsgSendToMinterResponse) Reset()         { *m = MsgSendToMinterResponse{} }
func (m *MsgSendToMinterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToMinterResponse) ProtoMessage()    {}
func (*MsgSendToMinterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{7}
}
func (m *MsgSendToMinterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToMinterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToMinterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToMinterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToMinterResponse.Merge(m, src)
}
func (m *MsgSendToMinterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToMinterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToMinterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToMinterResponse proto.InternalMessageInfo

// MsgRequestBatch
// this is a message anyone can send that requests a batch of transactions to
// send across the bridge be created for whatever block height this message is
// included in. This acts as a coordination point, the handler for this message
// looks at the AddToOutgoingPool tx's in the store and generates a batch, also
// available in the store tied to this message. The validators then grab this
// batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
// can finally submit the batch
// -------------
type MsgRequestBatch struct {
	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *MsgRequestBatch) Reset()         { *m = MsgRequestBatch{} }
func (m *MsgRequestBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatch) ProtoMessage()    {}
func (*MsgRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{8}
}
func (m *MsgRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatch.Merge(m, src)
}
func (m *MsgRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatch proto.InternalMessageInfo

func (m *MsgRequestBatch) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

// TODO: write response data here
type MsgRequestBatchResponse struct {
}

func (m *MsgRequestBatchResponse) Reset()         { *m = MsgRequestBatchResponse{} }
func (m *MsgRequestBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchResponse) ProtoMessage()    {}
func (*MsgRequestBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{9}
}
func (m *MsgRequestBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchResponse.Merge(m, src)
}
func (m *MsgRequestBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchResponse proto.InternalMessageInfo

// MsgConfirmBatch
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
type MsgConfirmBatch struct {
	Nonce        uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MinterSigner string `protobuf:"bytes,2,opt,name=minter_signer,json=minterSigner,proto3" json:"minter_signer,omitempty"`
	Validator    string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Signature    string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgConfirmBatch) Reset()         { *m = MsgConfirmBatch{} }
func (m *MsgConfirmBatch) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatch) ProtoMessage()    {}
func (*MsgConfirmBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{10}
}
func (m *MsgConfirmBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatch.Merge(m, src)
}
func (m *MsgConfirmBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatch proto.InternalMessageInfo

func (m *MsgConfirmBatch) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgConfirmBatch) GetMinterSigner() string {
	if m != nil {
		return m.MinterSigner
	}
	return ""
}

func (m *MsgConfirmBatch) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgConfirmBatch) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// TODO: write response data here
type MsgConfirmBatchResponse struct {
}

func (m *MsgConfirmBatchResponse) Reset()         { *m = MsgConfirmBatchResponse{} }
func (m *MsgConfirmBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatchResponse) ProtoMessage()    {}
func (*MsgConfirmBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{11}
}
func (m *MsgConfirmBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatchResponse.Merge(m, src)
}
func (m *MsgConfirmBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatchResponse proto.InternalMessageInfo

// EthereumBridgeDepositClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
type MsgDepositClaim struct {
	EventNonce     uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	CoinId         uint64                                 `protobuf:"varint,2,opt,name=coinId,proto3" json:"coinId,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	MinterSender   string                                 `protobuf:"bytes,4,opt,name=minter_sender,json=minterSender,proto3" json:"minter_sender,omitempty"`
	CosmosReceiver string                                 `protobuf:"bytes,5,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	Orchestrator   string                                 `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	TxHash         string                                 `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *MsgDepositClaim) Reset()         { *m = MsgDepositClaim{} }
func (m *MsgDepositClaim) String() string { return proto.CompactTextString(m) }
func (*MsgDepositClaim) ProtoMessage()    {}
func (*MsgDepositClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{12}
}
func (m *MsgDepositClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositClaim.Merge(m, src)
}
func (m *MsgDepositClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositClaim proto.InternalMessageInfo

func (m *MsgDepositClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgDepositClaim) GetCoinId() uint64 {
	if m != nil {
		return m.CoinId
	}
	return 0
}

func (m *MsgDepositClaim) GetMinterSender() string {
	if m != nil {
		return m.MinterSender
	}
	return ""
}

func (m *MsgDepositClaim) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *MsgDepositClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgDepositClaim) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// WithdrawClaim claims that a batch of withdrawal
// operations on the bridge contract was executed.
type MsgWithdrawClaim struct {
	EventNonce   uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BatchNonce   uint64 `protobuf:"varint,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	TxHash       string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *MsgWithdrawClaim) Reset()         { *m = MsgWithdrawClaim{} }
func (m *MsgWithdrawClaim) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawClaim) ProtoMessage()    {}
func (*MsgWithdrawClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{13}
}
func (m *MsgWithdrawClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawClaim.Merge(m, src)
}
func (m *MsgWithdrawClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawClaim proto.InternalMessageInfo

func (m *MsgWithdrawClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgWithdrawClaim) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *MsgWithdrawClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgWithdrawClaim) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// TODO: write response data here
type MsgWithdrawClaimResponse struct {
}

func (m *MsgWithdrawClaimResponse) Reset()         { *m = MsgWithdrawClaimResponse{} }
func (m *MsgWithdrawClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawClaimResponse) ProtoMessage()    {}
func (*MsgWithdrawClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{14}
}
func (m *MsgWithdrawClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawClaimResponse.Merge(m, src)
}
func (m *MsgWithdrawClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawClaimResponse proto.InternalMessageInfo

// TODO: write response data here
type MsgDepositClaimResponse struct {
}

func (m *MsgDepositClaimResponse) Reset()         { *m = MsgDepositClaimResponse{} }
func (m *MsgDepositClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositClaimResponse) ProtoMessage()    {}
func (*MsgDepositClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{15}
}
func (m *MsgDepositClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositClaimResponse.Merge(m, src)
}
func (m *MsgDepositClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositClaimResponse proto.InternalMessageInfo

// WithdrawClaim claims that a valset operations on the bridge contract was executed.
type MsgValsetClaim struct {
	EventNonce   uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	ValsetNonce  uint64 `protobuf:"varint,2,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,3,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgValsetClaim) Reset()         { *m = MsgValsetClaim{} }
func (m *MsgValsetClaim) String() string { return proto.CompactTextString(m) }
func (*MsgValsetClaim) ProtoMessage()    {}
func (*MsgValsetClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{16}
}
func (m *MsgValsetClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetClaim.Merge(m, src)
}
func (m *MsgValsetClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetClaim proto.InternalMessageInfo

func (m *MsgValsetClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgValsetClaim) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *MsgValsetClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

// TODO: write response data here
type MsgValsetClaimResponse struct {
}

func (m *MsgValsetClaimResponse) Reset()         { *m = MsgValsetClaimResponse{} }
func (m *MsgValsetClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValsetClaimResponse) ProtoMessage()    {}
func (*MsgValsetClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{17}
}
func (m *MsgValsetClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetClaimResponse.Merge(m, src)
}
func (m *MsgValsetClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetClaimResponse proto.InternalMessageInfo

type MsgSendToEthClaim struct {
	EventNonce   uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	CoinId       uint64                                 `protobuf:"varint,2,opt,name=coinId,proto3" json:"coinId,omitempty"`
	Amount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Fee          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee"`
	MinterSender string                                 `protobuf:"bytes,5,opt,name=minter_sender,json=minterSender,proto3" json:"minter_sender,omitempty"`
	EthReceiver  string                                 `protobuf:"bytes,6,opt,name=eth_receiver,json=ethReceiver,proto3" json:"eth_receiver,omitempty"`
	Orchestrator string                                 `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	TxHash       string                                 `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *MsgSendToEthClaim) Reset()         { *m = MsgSendToEthClaim{} }
func (m *MsgSendToEthClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthClaim) ProtoMessage()    {}
func (*MsgSendToEthClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{18}
}
func (m *MsgSendToEthClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthClaim.Merge(m, src)
}
func (m *MsgSendToEthClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthClaim proto.InternalMessageInfo

func (m *MsgSendToEthClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendToEthClaim) GetCoinId() uint64 {
	if m != nil {
		return m.CoinId
	}
	return 0
}

func (m *MsgSendToEthClaim) GetMinterSender() string {
	if m != nil {
		return m.MinterSender
	}
	return ""
}

func (m *MsgSendToEthClaim) GetEthReceiver() string {
	if m != nil {
		return m.EthReceiver
	}
	return ""
}

func (m *MsgSendToEthClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgSendToEthClaim) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// TODO: write response data here
type MsgSendToEthClaimResponse struct {
}

func (m *MsgSendToEthClaimResponse) Reset()         { *m = MsgSendToEthClaimResponse{} }
func (m *MsgSendToEthClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthClaimResponse) ProtoMessage()    {}
func (*MsgSendToEthClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a1bf1de956ed0f, []int{19}
}
func (m *MsgSendToEthClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthClaimResponse.Merge(m, src)
}
func (m *MsgSendToEthClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthClaimResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgValsetConfirm)(nil), "minter.v1.MsgValsetConfirm")
	proto.RegisterType((*MsgValsetConfirmResponse)(nil), "minter.v1.MsgValsetConfirmResponse")
	proto.RegisterType((*MsgValsetRequest)(nil), "minter.v1.MsgValsetRequest")
	proto.RegisterType((*MsgValsetRequestResponse)(nil), "minter.v1.MsgValsetRequestResponse")
	proto.RegisterType((*MsgSetMinterAddress)(nil), "minter.v1.MsgSetMinterAddress")
	proto.RegisterType((*MsgSetMinterAddressResponse)(nil), "minter.v1.MsgSetMinterAddressResponse")
	proto.RegisterType((*MsgSendToMinter)(nil), "minter.v1.MsgSendToMinter")
	proto.RegisterType((*MsgSendToMinterResponse)(nil), "minter.v1.MsgSendToMinterResponse")
	proto.RegisterType((*MsgRequestBatch)(nil), "minter.v1.MsgRequestBatch")
	proto.RegisterType((*MsgRequestBatchResponse)(nil), "minter.v1.MsgRequestBatchResponse")
	proto.RegisterType((*MsgConfirmBatch)(nil), "minter.v1.MsgConfirmBatch")
	proto.RegisterType((*MsgConfirmBatchResponse)(nil), "minter.v1.MsgConfirmBatchResponse")
	proto.RegisterType((*MsgDepositClaim)(nil), "minter.v1.MsgDepositClaim")
	proto.RegisterType((*MsgWithdrawClaim)(nil), "minter.v1.MsgWithdrawClaim")
	proto.RegisterType((*MsgWithdrawClaimResponse)(nil), "minter.v1.MsgWithdrawClaimResponse")
	proto.RegisterType((*MsgDepositClaimResponse)(nil), "minter.v1.MsgDepositClaimResponse")
	proto.RegisterType((*MsgValsetClaim)(nil), "minter.v1.MsgValsetClaim")
	proto.RegisterType((*MsgValsetClaimResponse)(nil), "minter.v1.MsgValsetClaimResponse")
	proto.RegisterType((*MsgSendToEthClaim)(nil), "minter.v1.MsgSendToEthClaim")
	proto.RegisterType((*MsgSendToEthClaimResponse)(nil), "minter.v1.MsgSendToEthClaimResponse")
}

func init() { proto.RegisterFile("minter/v1/msgs.proto", fileDescriptor_74a1bf1de956ed0f) }

var fileDescriptor_74a1bf1de956ed0f = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x6e, 0x9a, 0x34, 0x25, 0x2f, 0x69, 0x77, 0x31, 0x55, 0xeb, 0xa4, 0x5d, 0xa7, 0xf5, 0xfe,
	0x60, 0x2f, 0xd8, 0x74, 0x39, 0x70, 0x85, 0x76, 0x41, 0xf4, 0x50, 0x0e, 0xd9, 0x15, 0x48, 0x5c,
	0xa2, 0x89, 0x3d, 0x6b, 0x5b, 0x1b, 0xcf, 0x04, 0xcf, 0x24, 0x5b, 0xb8, 0x01, 0x17, 0x24, 0x2e,
	0x20, 0x8e, 0x88, 0xff, 0x67, 0x8f, 0x2b, 0x71, 0x41, 0x20, 0xad, 0x50, 0xcb, 0x1f, 0x82, 0x3c,
	0x33, 0x99, 0x78, 0x1c, 0x37, 0xbb, 0xdc, 0xf6, 0x54, 0xfb, 0xbd, 0xe7, 0xf7, 0x7d, 0xf3, 0xde,
	0x37, 0xef, 0x35, 0xb0, 0x93, 0x26, 0x84, 0xe3, 0xcc, 0x9f, 0x1d, 0xfb, 0x29, 0x8b, 0x98, 0x37,
	0xc9, 0x28, 0xa7, 0x56, 0x4b, 0x5a, 0xbd, 0xd9, 0x71, 0xcf, 0x09, 0x28, 0x4b, 0x29, 0xf3, 0x47,
	0x88, 0x61, 0x7f, 0x76, 0x3c, 0xc2, 0x1c, 0x1d, 0xfb, 0x01, 0x4d, 0x88, 0x0c, 0xed, 0xed, 0x44,
	0x34, 0xa2, 0xe2, 0xd1, 0xcf, 0x9f, 0x94, 0xf5, 0x20, 0xa2, 0x34, 0x1a, 0x63, 0x1f, 0x4d, 0x12,
	0x1f, 0x11, 0x42, 0x39, 0xe2, 0x09, 0x25, 0x2a, 0xbd, 0xfb, 0x53, 0x0d, 0x6e, 0x9e, 0xb3, 0xe8,
	0x0b, 0x34, 0x66, 0x98, 0x9f, 0x52, 0xf2, 0x24, 0xc9, 0x52, 0x6b, 0x07, 0x36, 0x08, 0x25, 0x01,
	0xb6, 0x6b, 0x87, 0xb5, 0xfb, 0x8d, 0x81, 0x7c, 0xb1, 0x0e, 0xa0, 0x35, 0x43, 0xe3, 0x24, 0x44,
	0x9c, 0x66, 0xf6, 0xfa, 0x61, 0xed, 0x7e, 0x6b, 0xb0, 0x30, 0x58, 0x77, 0x61, 0x5b, 0x32, 0x1d,
	0xa2, 0x30, 0xcc, 0x30, 0x63, 0x76, 0x5d, 0x84, 0x6c, 0x49, 0xeb, 0xc7, 0xd2, 0x98, 0x27, 0x61,
	0x49, 0x44, 0x10, 0x9f, 0x66, 0xd8, 0x6e, 0xc8, 0x24, 0xda, 0xe0, 0xf6, 0xc0, 0x2e, 0x93, 0x19,
	0x60, 0x36, 0xa1, 0x84, 0x61, 0xf7, 0xfd, 0x02, 0xd1, 0x01, 0xfe, 0x7a, 0x8a, 0x19, 0xcf, 0xb3,
	0x65, 0xf2, 0x11, 0x67, 0x82, 0x6c, 0x6b, 0xb0, 0x30, 0x18, 0xd9, 0xd4, 0x17, 0x3a, 0xdb, 0x53,
	0x78, 0xe7, 0x9c, 0x45, 0x8f, 0x30, 0x3f, 0x37, 0xe8, 0xd9, 0xb0, 0x39, 0xa7, 0x2f, 0xd3, 0xcd,
	0x5f, 0x5f, 0x71, 0x7a, 0xe3, 0x58, 0xf5, 0xf2, 0xb1, 0x6e, 0xc1, 0x7e, 0x05, 0x98, 0xe6, 0xf2,
	0x43, 0x0d, 0x6e, 0x08, 0x3f, 0x09, 0x1f, 0x53, 0x19, 0x62, 0xed, 0x42, 0x93, 0x61, 0x12, 0xea,
	0x63, 0xa9, 0x37, 0xab, 0x0f, 0x6d, 0x55, 0xe6, 0x10, 0x33, 0xae, 0x88, 0x80, 0x34, 0x3d, 0xcc,
	0x4b, 0xf2, 0x21, 0x34, 0x51, 0x4a, 0xa7, 0x84, 0x0b, 0x1a, 0xed, 0x07, 0x5d, 0x4f, 0xaa, 0xc6,
	0xcb, 0x55, 0xe3, 0x29, 0xd5, 0x78, 0xa7, 0x34, 0x21, 0x27, 0x8d, 0xe7, 0x2f, 0xfb, 0x6b, 0x03,
	0x15, 0xee, 0x76, 0x61, 0xaf, 0x44, 0x42, 0x13, 0xf4, 0x05, 0x3f, 0x55, 0xc2, 0x13, 0xc4, 0x83,
	0xf8, 0x15, 0x95, 0x97, 0xb9, 0x8a, 0x1f, 0xe8, 0x5c, 0x3f, 0xca, 0xc3, 0xaa, 0xee, 0xca, 0x64,
	0xd5, 0x7a, 0xbb, 0x0d, 0x4a, 0x3b, 0xc3, 0xbc, 0x92, 0x78, 0x5e, 0xf5, 0x8e, 0x34, 0x3e, 0x12,
	0x36, 0xb3, 0x2d, 0xf5, 0x95, 0x6d, 0x59, 0x52, 0x9b, 0x64, 0x59, 0x64, 0xa2, 0x59, 0xfe, 0xbe,
	0x2e, 0x58, 0x3e, 0xc4, 0x13, 0xca, 0x12, 0x7e, 0x3a, 0x46, 0x49, 0x9a, 0x97, 0x1e, 0xcf, 0x30,
	0xe1, 0xc3, 0x22, 0x57, 0x10, 0xa6, 0xcf, 0x05, 0xe1, 0x5d, 0x68, 0xe6, 0xb7, 0xf1, 0x2c, 0x14,
	0x4c, 0x1b, 0x03, 0xf5, 0x66, 0x7d, 0x6a, 0xb4, 0xa4, 0x75, 0xe2, 0xe5, 0x75, 0xff, 0xeb, 0x65,
	0xff, 0x5e, 0x94, 0xf0, 0x78, 0x3a, 0xf2, 0x02, 0x9a, 0xfa, 0xea, 0x6a, 0xcb, 0x3f, 0xef, 0xb1,
	0xf0, 0xa9, 0xcf, 0xbf, 0x99, 0x60, 0xe6, 0x9d, 0x11, 0x3e, 0xef, 0x50, 0xb1, 0x20, 0x52, 0x1a,
	0x0d, 0xa3, 0x20, 0x52, 0x20, 0xef, 0xc2, 0x0d, 0x99, 0x64, 0x98, 0xe1, 0x00, 0x27, 0x33, 0x9c,
	0xd9, 0x1b, 0x22, 0x6c, 0x5b, 0x9a, 0x07, 0xca, 0x6a, 0xb9, 0xd0, 0xa1, 0x59, 0x10, 0x63, 0xc6,
	0x33, 0x51, 0xbc, 0xa6, 0x4c, 0x56, 0xb4, 0x59, 0x7b, 0xb0, 0xc9, 0x2f, 0x86, 0x31, 0x62, 0xb1,
	0xbd, 0x29, 0x65, 0xc8, 0x2f, 0x3e, 0x43, 0x2c, 0x76, 0x7f, 0x91, 0x63, 0xe3, 0xcb, 0x84, 0xc7,
	0x61, 0x86, 0x9e, 0xbd, 0x66, 0x81, 0xfa, 0xd0, 0x1e, 0xe5, 0x65, 0x56, 0x01, 0xb2, 0x4a, 0x20,
	0x4c, 0x32, 0xa0, 0xcc, 0xa9, 0xb1, 0x9a, 0xd3, 0x86, 0xc1, 0x49, 0x5e, 0x77, 0x83, 0x92, 0xee,
	0xa7, 0x6c, 0x75, 0xb1, 0x9d, 0xda, 0x75, 0x01, 0xdb, 0x8b, 0x99, 0xf3, 0x7a, 0xe7, 0x38, 0x82,
	0xce, 0x4c, 0xc4, 0x1b, 0x07, 0x69, 0x4b, 0x5b, 0xf5, 0x49, 0xea, 0xcb, 0x27, 0x71, 0x6d, 0xd8,
	0x35, 0x91, 0x35, 0xa7, 0xbf, 0xd7, 0xe1, 0x6d, 0x7d, 0x19, 0x3f, 0xe1, 0xf1, 0x1b, 0x22, 0xc0,
	0x8f, 0xa0, 0xfe, 0x04, 0xab, 0x8b, 0xf4, 0xbf, 0x93, 0xe4, 0x9f, 0x2e, 0x4b, 0x78, 0xa3, 0x42,
	0xc2, 0x47, 0xd0, 0xc1, 0x3c, 0x5e, 0xe8, 0x57, 0x2a, 0xb3, 0x8d, 0x79, 0x7c, 0xad, 0x78, 0x37,
	0x57, 0x0b, 0xe5, 0x2d, 0x43, 0x28, 0xfb, 0xd0, 0x5d, 0x2a, 0xee, 0xbc, 0xf4, 0x0f, 0x7e, 0x6b,
	0x41, 0xfd, 0x9c, 0x45, 0x16, 0x87, 0x2d, 0x73, 0x29, 0xee, 0x7b, 0x7a, 0x13, 0x7b, 0xe5, 0x25,
	0xd5, 0xbb, 0xbd, 0xc2, 0xa9, 0xbb, 0x7a, 0xf4, 0xfd, 0x1f, 0xff, 0xfe, 0xba, 0xbe, 0xef, 0x76,
	0xfd, 0xc5, 0xa6, 0x57, 0x3a, 0x0a, 0x14, 0x88, 0x46, 0x9d, 0x6f, 0xb8, 0x4a, 0x54, 0xe5, 0xac,
	0x46, 0x2d, 0x6f, 0xba, 0x15, 0xa8, 0x6a, 0x60, 0x5b, 0xdf, 0xd5, 0xe0, 0xe6, 0xd2, 0x2a, 0x74,
	0xcc, 0xe4, 0x65, 0x7f, 0xef, 0xde, 0x6a, 0xbf, 0xc6, 0xbf, 0x2b, 0xf0, 0xfb, 0xee, 0xad, 0x02,
	0x7e, 0x0e, 0x6e, 0xfe, 0xb7, 0x60, 0x11, 0x68, 0xe9, 0x8e, 0x58, 0xbd, 0x72, 0xee, 0xc5, 0x52,
	0xea, 0xb9, 0xd7, 0xfb, 0x56, 0x9e, 0x39, 0x17, 0xdc, 0x90, 0x53, 0x85, 0x6b, 0x4d, 0xa0, 0x63,
	0x2c, 0xb4, 0x12, 0x64, 0xd1, 0x57, 0x86, 0xac, 0xdc, 0x6b, 0x87, 0x02, 0xb2, 0xe7, 0xda, 0x05,
	0x48, 0x55, 0xdf, 0xa1, 0x98, 0x70, 0x39, 0xa2, 0xb1, 0xf5, 0x4a, 0x88, 0x45, 0x5f, 0x19, 0xb1,
	0x72, 0x47, 0x55, 0x21, 0x2a, 0x1d, 0x2d, 0x10, 0x8d, 0x0d, 0x56, 0x42, 0x2c, 0xfa, 0xca, 0x88,
	0x95, 0xa3, 0xb2, 0x0a, 0x31, 0x94, 0x81, 0xc3, 0x40, 0x20, 0x70, 0xd8, 0x32, 0x77, 0x42, 0x49,
	0xbf, 0x86, 0xb3, 0xac, 0xdf, 0xea, 0xd1, 0x5d, 0xd5, 0xcb, 0x67, 0x2a, 0x52, 0xa1, 0x7e, 0x0b,
	0xdb, 0xa5, 0x51, 0x79, 0x50, 0x25, 0x92, 0xb9, 0xb7, 0x77, 0x67, 0x95, 0x57, 0x03, 0xdf, 0x11,
	0xc0, 0x8e, 0x7b, 0x50, 0x21, 0xa2, 0x7c, 0x3e, 0x49, 0xec, 0x31, 0xb4, 0x8b, 0xbb, 0xa3, 0x5b,
	0x39, 0x08, 0x04, 0xea, 0xd1, 0xb5, 0x2e, 0x0d, 0xd9, 0x17, 0x90, 0x5d, 0x77, 0xaf, 0x62, 0x42,
	0xe4, 0x81, 0x27, 0x67, 0xcf, 0x2f, 0x9d, 0xda, 0x8b, 0x4b, 0xa7, 0xf6, 0xcf, 0xa5, 0x53, 0xfb,
	0xf9, 0xca, 0x59, 0x7b, 0x71, 0xe5, 0xac, 0xfd, 0x79, 0xe5, 0xac, 0x7d, 0xe5, 0x17, 0xc6, 0xb0,
	0xbc, 0x0d, 0x8f, 0x31, 0x4a, 0xfd, 0x34, 0x9e, 0x8e, 0xfc, 0x20, 0x46, 0x09, 0xf1, 0x2f, 0xe6,
	0x49, 0xc5, 0x4c, 0x1e, 0x35, 0xc5, 0x0f, 0x80, 0x0f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x3b, 0xeb, 0x44, 0x77, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error)
	ValsetRequest(ctx context.Context, in *MsgValsetRequest, opts ...grpc.CallOption) (*MsgValsetRequestResponse, error)
	SetMinterAddress(ctx context.Context, in *MsgSetMinterAddress, opts ...grpc.CallOption) (*MsgSetMinterAddressResponse, error)
	SendToEth(ctx context.Context, in *MsgSendToMinter, opts ...grpc.CallOption) (*MsgSendToMinterResponse, error)
	RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error)
	ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error)
	DepositClaim(ctx context.Context, in *MsgDepositClaim, opts ...grpc.CallOption) (*MsgDepositClaimResponse, error)
	WithdrawClaim(ctx context.Context, in *MsgWithdrawClaim, opts ...grpc.CallOption) (*MsgWithdrawClaimResponse, error)
	SendToEthClaim(ctx context.Context, in *MsgSendToEthClaim, opts ...grpc.CallOption) (*MsgSendToEthClaimResponse, error)
	ValsetClaim(ctx context.Context, in *MsgValsetClaim, opts ...grpc.CallOption) (*MsgValsetClaimResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error) {
	out := new(MsgValsetConfirmResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/ValsetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValsetRequest(ctx context.Context, in *MsgValsetRequest, opts ...grpc.CallOption) (*MsgValsetRequestResponse, error) {
	out := new(MsgValsetRequestResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/ValsetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMinterAddress(ctx context.Context, in *MsgSetMinterAddress, opts ...grpc.CallOption) (*MsgSetMinterAddressResponse, error) {
	out := new(MsgSetMinterAddressResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/SetMinterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToEth(ctx context.Context, in *MsgSendToMinter, opts ...grpc.CallOption) (*MsgSendToMinterResponse, error) {
	out := new(MsgSendToMinterResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/SendToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error) {
	out := new(MsgRequestBatchResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/RequestBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error) {
	out := new(MsgConfirmBatchResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/ConfirmBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositClaim(ctx context.Context, in *MsgDepositClaim, opts ...grpc.CallOption) (*MsgDepositClaimResponse, error) {
	out := new(MsgDepositClaimResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/DepositClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawClaim(ctx context.Context, in *MsgWithdrawClaim, opts ...grpc.CallOption) (*MsgWithdrawClaimResponse, error) {
	out := new(MsgWithdrawClaimResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/WithdrawClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToEthClaim(ctx context.Context, in *MsgSendToEthClaim, opts ...grpc.CallOption) (*MsgSendToEthClaimResponse, error) {
	out := new(MsgSendToEthClaimResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/SendToEthClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValsetClaim(ctx context.Context, in *MsgValsetClaim, opts ...grpc.CallOption) (*MsgValsetClaimResponse, error) {
	out := new(MsgValsetClaimResponse)
	err := c.cc.Invoke(ctx, "/minter.v1.Msg/ValsetClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ValsetConfirm(context.Context, *MsgValsetConfirm) (*MsgValsetConfirmResponse, error)
	ValsetRequest(context.Context, *MsgValsetRequest) (*MsgValsetRequestResponse, error)
	SetMinterAddress(context.Context, *MsgSetMinterAddress) (*MsgSetMinterAddressResponse, error)
	SendToEth(context.Context, *MsgSendToMinter) (*MsgSendToMinterResponse, error)
	RequestBatch(context.Context, *MsgRequestBatch) (*MsgRequestBatchResponse, error)
	ConfirmBatch(context.Context, *MsgConfirmBatch) (*MsgConfirmBatchResponse, error)
	DepositClaim(context.Context, *MsgDepositClaim) (*MsgDepositClaimResponse, error)
	WithdrawClaim(context.Context, *MsgWithdrawClaim) (*MsgWithdrawClaimResponse, error)
	SendToEthClaim(context.Context, *MsgSendToEthClaim) (*MsgSendToEthClaimResponse, error)
	ValsetClaim(context.Context, *MsgValsetClaim) (*MsgValsetClaimResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ValsetConfirm(ctx context.Context, req *MsgValsetConfirm) (*MsgValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (*UnimplementedMsgServer) ValsetRequest(ctx context.Context, req *MsgValsetRequest) (*MsgValsetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetRequest not implemented")
}
func (*UnimplementedMsgServer) SetMinterAddress(ctx context.Context, req *MsgSetMinterAddress) (*MsgSetMinterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinterAddress not implemented")
}
func (*UnimplementedMsgServer) SendToEth(ctx context.Context, req *MsgSendToMinter) (*MsgSendToMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEth not implemented")
}
func (*UnimplementedMsgServer) RequestBatch(ctx context.Context, req *MsgRequestBatch) (*MsgRequestBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatch not implemented")
}
func (*UnimplementedMsgServer) ConfirmBatch(ctx context.Context, req *MsgConfirmBatch) (*MsgConfirmBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBatch not implemented")
}
func (*UnimplementedMsgServer) DepositClaim(ctx context.Context, req *MsgDepositClaim) (*MsgDepositClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositClaim not implemented")
}
func (*UnimplementedMsgServer) WithdrawClaim(ctx context.Context, req *MsgWithdrawClaim) (*MsgWithdrawClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawClaim not implemented")
}
func (*UnimplementedMsgServer) SendToEthClaim(ctx context.Context, req *MsgSendToEthClaim) (*MsgSendToEthClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEthClaim not implemented")
}
func (*UnimplementedMsgServer) ValsetClaim(ctx context.Context, req *MsgValsetClaim) (*MsgValsetClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetClaim not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/ValsetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetConfirm(ctx, req.(*MsgValsetConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValsetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/ValsetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetRequest(ctx, req.(*MsgValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMinterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMinterAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMinterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/SetMinterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMinterAddress(ctx, req.(*MsgSetMinterAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToMinter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/SendToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEth(ctx, req.(*MsgSendToMinter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/RequestBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatch(ctx, req.(*MsgRequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/ConfirmBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBatch(ctx, req.(*MsgConfirmBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/DepositClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositClaim(ctx, req.(*MsgDepositClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/WithdrawClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawClaim(ctx, req.(*MsgWithdrawClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToEthClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEthClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEthClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/SendToEthClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEthClaim(ctx, req.(*MsgSendToEthClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValsetClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minter.v1.Msg/ValsetClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetClaim(ctx, req.(*MsgValsetClaim))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minter.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValsetConfirm",
			Handler:    _Msg_ValsetConfirm_Handler,
		},
		{
			MethodName: "ValsetRequest",
			Handler:    _Msg_ValsetRequest_Handler,
		},
		{
			MethodName: "SetMinterAddress",
			Handler:    _Msg_SetMinterAddress_Handler,
		},
		{
			MethodName: "SendToEth",
			Handler:    _Msg_SendToEth_Handler,
		},
		{
			MethodName: "RequestBatch",
			Handler:    _Msg_RequestBatch_Handler,
		},
		{
			MethodName: "ConfirmBatch",
			Handler:    _Msg_ConfirmBatch_Handler,
		},
		{
			MethodName: "DepositClaim",
			Handler:    _Msg_DepositClaim_Handler,
		},
		{
			MethodName: "WithdrawClaim",
			Handler:    _Msg_WithdrawClaim_Handler,
		},
		{
			MethodName: "SendToEthClaim",
			Handler:    _Msg_SendToEthClaim_Handler,
		},
		{
			MethodName: "ValsetClaim",
			Handler:    _Msg_ValsetClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minter/v1/msgs.proto",
}

func (m *MsgValsetConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MinterAddress) > 0 {
		i -= len(m.MinterAddress)
		copy(dAtA[i:], m.MinterAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MinterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgValsetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgValsetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValsetRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMinterAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMinterAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMinterAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMinterAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMinterAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMinterAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MinterDest) > 0 {
		i -= len(m.MinterDest)
		copy(dAtA[i:], m.MinterDest)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MinterDest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToMinterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToMinterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToMinterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinterSigner) > 0 {
		i -= len(m.MinterSigner)
		copy(dAtA[i:], m.MinterSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MinterSigner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinterSender) > 0 {
		i -= len(m.MinterSender)
		copy(dAtA[i:], m.MinterSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MinterSender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CoinId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.CoinId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgValsetClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgValsetClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthReceiver) > 0 {
		i -= len(m.EthReceiver)
		copy(dAtA[i:], m.EthReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinterSender) > 0 {
		i -= len(m.MinterSender)
		copy(dAtA[i:], m.MinterSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MinterSender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CoinId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.CoinId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgValsetConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.MinterAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgValsetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgValsetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgValsetRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMinterAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSetMinterAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.MinterDest)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToMinterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRequestBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.MinterSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgConfirmBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.CoinId != 0 {
		n += 1 + sovMsgs(uint64(m.CoinId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.MinterSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgWithdrawClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgWithdrawClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgValsetClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovMsgs(uint64(m.ValsetNonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgValsetClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToEthClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.CoinId != 0 {
		n += 1 + sovMsgs(uint64(m.CoinId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.MinterSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendToEthClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgValsetConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMinterAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMinterAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMinterAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMinterAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMinterAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMinterAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToMinterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToMinterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToMinterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinId", wireType)
			}
			m.CoinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinId", wireType)
			}
			m.CoinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
